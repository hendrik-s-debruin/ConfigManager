#!/usr/bin/env python3

import sys
import os
import os.path

# script usage
usage = """Usage:
cfgmgr new <alias>
cfgmgr list
cfgmgr clone <alias> <repo>
cfgmger manage <alias> <git command>
cfgmgr foreach <git command>
"""

# Global variables for paths
home_dir           = os.path.expanduser("~")
config_location    = home_dir + "/.config/cfgmgr"
configuration_dirs = config_location + "/configs"

class ConfigLister:
    """
    Lists the configurations that are tracked by cfgmgr
    """
    def run(self):
        for el in ConfigLister.get_list():
            print(el)

    @staticmethod
    def get_list():
        list = []
        for el in os.listdir(configuration_dirs):
            if(os.path.isdir(configuration_dirs + "/" + el)):
                list.append(el)
        return list

class ConfigCreator:
    """
    Creates a new configuration to be tracked and managed by cfgmgr
    """
    def __init__(self, config_name):
        self.config_name = config_name
        self.config_location = configuration_dirs + "/" + config_name
        self.init_command = "git init --bare " + self.config_location
        self.hide_untracked_command = "git --git-dir='" + self.config_location + "' --work-tree='" + home_dir + "' config --local status.showUntrackedFiles no"

    def run(self):
        if(os.path.isdir(self.config_location)):
            raise RuntimeError("Configuration '" + self.config_name + "' already exists")
        os.system(self.init_command)
        os.chdir(self.config_location)
        os.system(self.hide_untracked_command)

class ConfigCloner:
    def __init__(self, config_name, remote):
        self.config_name = config_name
        self.remote = remote
        self.config_location = configuration_dirs + "/" + config_name
        self.config_path = configuration_dirs + "/" + self.config_name
        self.clone_command = "git clone --bare " + self.remote + " '" + self.config_path + "'"
        self.hide_untracked_command = "git --git-dir='" + self.config_location + "' --work-tree='" + home_dir + "' config --local status.showUntrackedFiles no"

    def run(self):
        if(os.path.isdir(self.config_path)):
            raise RuntimeError("Configuration '" + self.config_name + "' already exists")
        os.system(self.clone_command)
        os.chdir(self.config_location)
        os.system(self.hide_untracked_command)

class ConfigUpdator:
    def __init__(self, config_name, git_command):
        self.config_name = config_name
        self.config_location = configuration_dirs + "/" + config_name
        self.git_command = "git --git-dir='" + self.config_location + "' --work-tree='" + home_dir + "' " + git_command

    def run(self):
        # Check this is a tracked configuration
        if(not os.path.isdir(self.config_location)):
            raise RuntimeError("Configuration '" + self.config_name + "' does not exist")

        # Manage the .gitmodules files
        gitmodules = home_dir + '/.gitmodules'
        if os.path.islink(gitmodules):
            link_dest = os.readlink(gitmodules)
            if not link_dest.startswith(config_location):
                raise RuntimeError("Error: " + home_dir + "/.gitmodules has destination outside of ConfigManager's repositories")
            os.remove(gitmodules)
        elif os.path.isfile(gitmodules):
            raise RuntimeError("Error: File " + home_dir + "/.gitmodules already exists.")
        os.symlink(config_location + '/gitmodules.' + self.config_name, home_dir + '/.gitmodules')

        # Run the git command
        os.system(self.git_command)

class ForeachConfigUpdator:
    def __init__(self, git_command):
        self.git_command = git_command
        self.term_width = os.get_terminal_size()[0]
        if self.term_width > 80:
            self.term_width = 80

    def get_config_header(self, config_name):
        # +2 for spaces on either side
        name_length = len(config_name) + 2
        # the combined size of the "===== <config> =====" borders on either side
        filler_length = self.term_width - name_length

        filler_left = int(filler_length / 2)
        if filler_length % 2 == 0:
            filler_right = filler_left
        else:
            filler_right = filler_left + 1

        return (filler_left*"=") + " " + config_name + " " + (filler_right*"=")


    def run(self):
        configs = ConfigLister.get_list()
        for config in configs:
            print(self.get_config_header(config))
            updator = ConfigUpdator(config, self.git_command)
            updator.run()

def parse_command():
    if(len(sys.argv) < 2):
        raise RuntimeError(usage)

    if sys.argv[1] == "list":
        if len(sys.argv) != 2:
            raise RuntimeError(usage)
        else:
            return ConfigLister()

    if sys.argv[1] == "new":
        if len(sys.argv) != 3:
            raise RuntimeError(usage)
        else:
            return ConfigCreator(sys.argv[2])

    if sys.argv[1] == "clone":
        if len(sys.argv) != 4:
            raise RuntimeError(usage)
        else:
            return ConfigCloner(sys.argv[2], sys.argv[3])

    if sys.argv[1] == "manage":
        if len(sys.argv) < 4:
            raise RuntimeError(usage)
        else:
            config_name = sys.argv[2]
            commands = sys.argv[3:]
            # add quotes around each command, else the shell will misinterpret
            # them
            for i in range(len(commands)):
                commands[i] = "'" + commands[i] + "'"
            git_command = " ".join(commands)
            return ConfigUpdator(config_name, git_command)

    if sys.argv[1] == "foreach":
        if len(sys.argv) < 3:
            raise RuntimeError(usage)
        else:
            commands = sys.argv[2:]
            # add quotes around each command, else the shell will misinterpret
            # them
            for i in range(len(commands)):
                commands[i] = "'" + commands[i] + "'"
            git_command = " ".join(commands)
            return ForeachConfigUpdator(git_command)

    raise RuntimeError(usage)

def main():
    try:
        command = parse_command()
        command.run()
    except Exception as e:
        print(e)
        exit(1)

if __name__ == "__main__":
    main()
